<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lenglu的博客</title>
  <icon>https://www.gravatar.com/avatar/dd6221777591e247b8f1ff87c6d0243f</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lenglu.codeing.me/"/>
  <updated>2018-09-16T06:09:36.726Z</updated>
  <id>http://lenglu.codeing.me/</id>
  
  <author>
    <name>Lenglu</name>
    <email>914584378@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lenglu.codeing.me/2018/09/22/hello-world/"/>
    <id>http://lenglu.codeing.me/2018/09/22/hello-world/</id>
    <published>2018-09-22T07:08:07.409Z</published>
    <updated>2018-09-16T06:09:36.726Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端面试题300道</title>
    <link href="http://lenglu.codeing.me/2018/09/20/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98300%E9%81%93/"/>
    <id>http://lenglu.codeing.me/2018/09/20/前端面试题300道/</id>
    <published>2018-09-20T14:21:49.000Z</published>
    <updated>2018-09-20T15:35:22.301Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="url=&quot;https://blog.csdn.net/qq_22944825/article/details/78169321&quot;">https://blog.csdn.net/qq_22944825/article/details/78169321</a><br>1.手写jsonp的实现<br>2.手写单链表查找倒数第k个节点<br>3.http请求头，请求体，cookie在哪个里面？url在哪里面？<br>4.什么是原型链？<br>5.对闭包的理解，实现一个暴露内部变量，而且外部可以访问修改的函数<br>6.基本的数据类型<br>7.基本的两列自适应布局<br>8.Linux中常用的命令行<br>9.OSI模型，HTTP，TCP，UDP分别在那些层<br>10.解释平衡二叉树，以及在数据结构中的应用（红黑树）<br>11.快拍的时间复杂度和空间复杂度<br>12.手写一个jQuery插件<br>13.在jQuery方法和原型上面添加方法的区别和实现，以及jQuery对象的实现<br>14.手写一个递归函数<br>15.对前端路由的理解？前后端路由的区别？<br>16.介绍一下webpack和gulp，grunt以及项目中的使用<br><a id="more"></a><br>17.你对es6的了解<br>18.解释一下vue和react，以及异同点<br>19.关于平衡二叉树<br>20.前后端分离的意义以及对前端工程化的理解<br>21.使用css实现一个三角形<br>22.使用promise手写ajax<br>23.手写一个类的继承，并解释一下<br>24.解释一下call,apply,bind函数的用法，以及区别 25.手写一个简单的遍历算法<br>26.手写一个js的深克隆<br>27.for函数里面setTimeout函数异步问题<br>28.手写归并排序<br>29.手写一个原生ajax<br>30.手写实现promise<br>31.手写实现requireJS模块实现<br>32.手写实现jQuery里面的insertAfter<br>33.AMD和CMD，commonJS的区别<br>34.介绍一下backbone<br>35.了解过SEO吗？<br>36.低版本浏览器不支持HTML5标签怎么解决？<br>37.实现一个布局：左边固定宽度为200，右边自适应，而且滚动条要自动出现在最高的那一个<br>38.画出盒子模型，要使谷歌浏览器的盒子模型显示得跟IE浏览器一致（让谷歌跟ie一致，不是ie跟谷歌一致），该怎么做？<br>39.手写JS实现类继承，讲原型链原理，并解释new一个对象的过程都发生了什么<br>40.Array对象自带的方法，一一列举<br>41.若干个数字，怎么选出最大的五个<br>42.Array对象自带的排序函数底层是怎么实现的？<br>43.常用的排序算法有哪些，介绍一下选择排序<br>44.了解navigator对象吗？<br>45.手写一个正则表达式，验证邮箱<br>46.link和@import引入CSS的区别？<br>47.浏览器不兼容@import，具体指哪些浏览器？<br>48.介绍一下cookie,localstorage,sessionstorage,session<br>49.jquery绑定click的方法有几种<br>50.如何优化网站<br>51.闭包，ES6，跨域<br>52.用纸笔写一个Closure，任意形式和内容<br>53.知不知道Array-like Object？<br>54.如何用Native JavaScript来读写Cookie？<br>55.Cross-domain access有没有了解？<br>56.前端安全方面有没有了解？XSS和CSRF如何攻防？<br>57.HTTP Response的Header里面都有些啥？<br>58.知不知道HTTP2？<br>59.输入URL后发生了什么？<br>60.new operator实际上做了什么？<br>61.面向对象的属性有哪些？<br>62.事件代理js实现<br>63.继承的两种方法<br>64.ajax，原生ajax的四个过程<br>65.闭包，简单说一个闭包的应用，然后闭包的主要作用是什么<br>66.写一个递归。就是每隔5秒调用一个自身，一共100次<br>67.cookie和session有什么区别<br>68.网络分层结构<br>69.Cookie 是否会被覆盖，localStorage是否会被覆盖<br>70.Css实现三列布局<br>71.Css实现保持长宽比1:1<br>72.Css实现两个自适应等宽元素中间空10个像素<br>73.requireJS的原理是什么<br>74.如何保持登录状态<br>75.原生js添加class怎么添加，如果本身已经有class了，会不会覆盖，怎么保留？<br>76.Jsonp的原理。怎么去读取一个script里面的数据？<br>77.js异步的方法（promise，generator，async）<br>78.Cookie跨域请求能不能带上<br>79.commonJS和AMD<br>80.说说你对组件的理解<br>81.Post一个file的时候file放在哪的？<br>82.组件的html怎么进行管理<br>83.js的异步加载，promise的三种状态，ES7中的async用过么<br>84.静态属性怎么继承<br>85.angular的双向绑定原理<br>86.angular和react的认识<br>87.MVVM是什么<br>88.MVC是什么<br>89.移动端要注意哪些？<br>90.rem是什么？em是什么？如果上一层就是根root了，em和rem等价么？<br>91.怎么测试的？会自动化测试么？<br>92.怎么得到一个页面的a标签？<br>93.怎么在页面里放置一个很简单的图标，不能用img和background-img？<br>94.正则表达式判断url<br>95.js轮播实现思路<br>96.使用js画一个抛物线，抛物线上有个小球随着抛物线运动，有两个按钮能使小球继续运动停止运动<br>97.display有哪些值？说明他们的作用<br>98.requirejs怎么防止重复加载<br>99.ES6里头的箭头函数的this对象与其他的有啥区别<br>100.mysql与 MongoDB的区别<br>101.w3c事件与IE事件的区别<br>102.IE与W3C怎么阻止事件的冒泡<br>103.gulp底层实现原理<br>104.webpack底层实现原理<br>105.gulp与webpack区别<br>106.vuejs与angularjs的区别<br>107.vuex是用来做什么的<br>108.说下你知道的响应状态码<br>109.ajax的过程以及 readyState几个状态的含义<br>110.前端优化你知道哪些<br>111.es6与es7了解多少<br>112.看过哪些框架的源码<br>113.你知道有哪些跨域方式,分别说说<br>114.JavaScript有哪几种类型的值<br>115.怎么实现两个大整数的相乘，说下思路<br>116.你学过算法没,说说你都了解些什么<br>117.你学过数据结构没,说说你都了解些什么<br>118.说下选择排序,冒泡排序的实现思路<br>119.让你设计一个前端css框架你怎么做<br>120.了解哪些设计模式说说看<br>121.js中this的作用<br>122.js中上下文是什么<br>123.js有哪些函数能改变上下文<br>124.要是让你自己写一个js框架你会用到哪些设计模式<br>125.写js自定义事件<br>126.vue与angularjs中双向数据绑定是怎样实现的？<br>127.link和@import有什么区别？<br>128.写个从几个li中取下标的闭包代码<br>129.lazyload如何实现<br>130.repaint和reflow区别<br>131.setTimeout和setInterval区别，如何互相实现？<br>132.伪类和伪元素区别<br>133.vue如何实现父子组件通信，以及非父子组件通信<br>134.数组去重  </p><p>135.使用flex布局实现三等分，左右两个元素分别贴到左边和右边，垂直居中<br>136.实现bind函数<br>137.数组和链表区别，分别适合什么数据结构<br>138.《js高级程序设计》和《你不知道的js》有什么区别<br>139.n长的数组放入n+1个数，不能重复，找出那个缺失的数<br>140.用原生js实现复选框选择以及全选非全选功能<br>141.用4个颜色给一个六面体上色有多少种情况<br>145.amd和cmd区别<br>146.vue的特点？双向数据绑定是如何实现的<br>147.Object.defineProperty<br>148.数组去重，去除重复两次以上的元素<br>149.嵌套的ul-li结构，根据input中输入的内容，去除相应的li节点，且如果某个嵌套的ul下面的li都被移除，则该ul的父li节点也要被移除<br>150.浏览器如何实现图片缓存<br>151.页面加载过程</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;url=&amp;quot;https://blog.csdn.net/qq_22944825/article/details/78169321&amp;quot;&quot;&gt;https://blog.csdn.net/qq_22944825/article/details/78169321&lt;/a&gt;&lt;br&gt;1.手写jsonp的实现&lt;br&gt;2.手写单链表查找倒数第k个节点&lt;br&gt;3.http请求头，请求体，cookie在哪个里面？url在哪里面？&lt;br&gt;4.什么是原型链？&lt;br&gt;5.对闭包的理解，实现一个暴露内部变量，而且外部可以访问修改的函数&lt;br&gt;6.基本的数据类型&lt;br&gt;7.基本的两列自适应布局&lt;br&gt;8.Linux中常用的命令行&lt;br&gt;9.OSI模型，HTTP，TCP，UDP分别在那些层&lt;br&gt;10.解释平衡二叉树，以及在数据结构中的应用（红黑树）&lt;br&gt;11.快拍的时间复杂度和空间复杂度&lt;br&gt;12.手写一个jQuery插件&lt;br&gt;13.在jQuery方法和原型上面添加方法的区别和实现，以及jQuery对象的实现&lt;br&gt;14.手写一个递归函数&lt;br&gt;15.对前端路由的理解？前后端路由的区别？&lt;br&gt;16.介绍一下webpack和gulp，grunt以及项目中的使用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>服务器端URL从定向后获取referer(referrer)</title>
    <link href="http://lenglu.codeing.me/2018/09/16/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AFURL%E4%BB%8E%E5%AE%9A%E5%90%91%E5%90%8E%E8%8E%B7%E5%8F%96referer-referer/"/>
    <id>http://lenglu.codeing.me/2018/09/16/服务器端URL从定向后获取referer-referer/</id>
    <published>2018-09-16T11:06:00.000Z</published>
    <updated>2018-09-16T15:25:30.464Z</updated>
    
    <content type="html"><![CDATA[<h6 id="使用express框架时服务器端重定向后获取不到referer-referrer"><a href="#使用express框架时服务器端重定向后获取不到referer-referrer" class="headerlink" title="使用express框架时服务器端重定向后获取不到referer(referrer)"></a>使用express框架时服务器端重定向后获取不到referer(referrer)</h6><p>如果使用过这个参数，我们会发现有时候是referer，而有时候是referrer。究竟是怎么回事呢？<br>这里的referer是一个历史遗留问题,http中里面有用来表示页面或者资源请求头，是在上世纪九十年代提出来的，但是当时将这个命名为referer，并写入http协议的里面，正确的写法实际上是referrer。由于在http协议中标准错误了，错误大家就讲错就错，浏览器和服务端使用这个错误的referer，但是意思都是一个样的。<br><a id="more"></a><br>但是在JavaScript中呢，大家就比较统一，统一使用referrer，我们可以使用document.referrer来获取referrer来找到源地址。<br>在测试重定向时，先用NodeJs在后端进行referer获取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/test&apos;, function(req, res, next) &#123;</span><br><span class="line">    var Url = req.originalUrl;</span><br><span class="line">    var refe = req.headers[referer];</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>req.originalUrl获取的是当前的url地址,没有问题。但是req.headers[referer]却没有结果，console.log出现的是undefined，将referer改为了referrer也是同样的结果。<br>点开express查看源码(/express/lib/request.js):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">req.get = </span><br><span class="line">req.header = function header(name) &#123;</span><br><span class="line">    if (!name) &#123;</span><br><span class="line">    throw new TypeError(&apos;name argument is required to req.get&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (typeof name !== &apos;string&apos;) &#123;</span><br><span class="line">    throw new TypeError(&apos;name must be a string to req.get&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    var lc = name.toLowerCase();</span><br><span class="line">    switch (lc) &#123;</span><br><span class="line">    case &apos;referer&apos;:</span><br><span class="line">        case: &apos;referrer&apos;:</span><br><span class="line">        return this.headers.referrer</span><br><span class="line">            || this.headers.referer;</span><br><span class="line">        default:</span><br><span class="line">        return this.headers[lc];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>显示其中有这个方法，而且能同时识别referer和referrer，但我们确是得到了undefined，那么我们就输出headers：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/test&apos;, function(req, res, next)&#123;</span><br><span class="line">    var Url = req.originalUrl;</span><br><span class="line">    var refe = req.headers;</span><br><span class="line">    res.writeHeade(200, &#123;</span><br><span class="line">    &quot;Content-Type&quot;: &quot;text/html;charset=utf-8&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(JSON.stringify(refe));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>出现的结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;host&quot;:&quot;localhost:3000&quot;,</span><br><span class="line">&quot;connection&quot;:&quot;keep-alive&quot;,</span><br><span class="line">&quot;upgrade-insecure-requests&quot;:&quot;1&quot;,</span><br><span class="line">&quot;user-agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36&quot;,</span><br><span class="line">&quot;accept&quot;:&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;,</span><br><span class="line">&quot;accept-encoding&quot;:&quot;gzip, deflate, sdch&quot;,</span><br><span class="line">&quot;accept-language&quot;:&quot;zh-CN,zh;q=0.8&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>原因是重定向时没有这个参数。<br>再查查看，会发现。这个referer的支持是不统一的，referer这个参数是浏览器自动添加到header中的，并且通过浏览器自动传递下去，不管是几重定向，找到都是最终的源地址。<br>重新部署一个服务器，写两个网页，用a来进行重定向,我们得到的结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;host&quot;:&quot;localhost:3000&quot;,</span><br><span class="line">&quot;connection&quot;:&quot;keep-alive&quot;,</span><br><span class="line">&quot;upgrade-insecure-requests&quot;:&quot;1&quot;,</span><br><span class="line">&quot;user-agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36&quot;,</span><br><span class="line">&quot;accept&quot;:&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;,</span><br><span class="line">&quot;referer&quot;:&quot;http://localhost/test/1.html&quot;,</span><br><span class="line">&quot;accept-encoding&quot;:&quot;gzip, deflate, sdch&quot;,</span><br><span class="line">&quot;accept-language&quot;:&quot;zh-CN,zh;q=0.8&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>现在便有了referer属性。<br>如果重定向时需要传递重定向之前的URL不要直接使用referer，可以这样实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/test&apos;, (req, res, next) =&gt; &#123;</span><br><span class="line">    let _url = req.headers.referer || req.protocol + &apos;://&apos; + req.get(&apos;host&apos;);</span><br><span class="line">    res.redirect(&apos;/redirect?returnUrl=&apos; + escape(_url));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>能获取到referer</th><th>不能获取到referer</th></tr></thead><tbody><tr><td>使用A标签来访问页面</td><td>使用js重定向 location.href 和 location.replace()</td></tr><tr><td>submit input提交的表单post和get</td><td>服务器端的redirect，PHP中的header(“location:”)</td></tr><tr><td>使用js提交的post和get表单</td><td>使用http重定向（我开始做的就是http重定向的项目，所以得不到referer参数）</td></tr></tbody></table><p>测试referer可以打开Chrome，按F12,切换至Network选项卡，点击<strong>第一项请求</strong>，右侧选择Headers选项卡展开Request Headers对象查看有无’Referer’属性。</p><p>参考文章：<a href="https://blog.csdn.net/qq_25107499/article/details/52123779" target="_blank" rel="noopener">URL重定向,referer，referrer和安全</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;使用express框架时服务器端重定向后获取不到referer-referrer&quot;&gt;&lt;a href=&quot;#使用express框架时服务器端重定向后获取不到referer-referrer&quot; class=&quot;headerlink&quot; title=&quot;使用express框架时服务器端重定向后获取不到referer(referrer)&quot;&gt;&lt;/a&gt;使用express框架时服务器端重定向后获取不到referer(referrer)&lt;/h6&gt;&lt;p&gt;如果使用过这个参数，我们会发现有时候是referer，而有时候是referrer。究竟是怎么回事呢？&lt;br&gt;这里的referer是一个历史遗留问题,http中里面有用来表示页面或者资源请求头，是在上世纪九十年代提出来的，但是当时将这个命名为referer，并写入http协议的里面，正确的写法实际上是referrer。由于在http协议中标准错误了，错误大家就讲错就错，浏览器和服务端使用这个错误的referer，但是意思都是一个样的。&lt;br&gt;
    
    </summary>
    
    
      <category term="Express" scheme="http://lenglu.codeing.me/tags/Express/"/>
    
      <category term="重定向" scheme="http://lenglu.codeing.me/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu终端常用命令</title>
    <link href="http://lenglu.codeing.me/2018/09/16/ntu%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://lenglu.codeing.me/2018/09/16/ntu终端常用命令/</id>
    <published>2018-09-16T10:28:00.000Z</published>
    <updated>2018-09-16T14:18:35.225Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s5.postimg.cc/eueihnoyv/ccef0b51172a4471917312b009af1fd4.jpg" alt="ccef0b51172a4471917312b009af1fd4.jpg"></p><h6 id="打开系统根目录"><a href="#打开系统根目录" class="headerlink" title="打开系统根目录"></a>打开系统根目录</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><h6 id="进入home目录"><a href="#进入home目录" class="headerlink" title="进入home目录"></a>进入home目录</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br></pre></td></tr></table></figure><h6 id="列出文件和目录"><a href="#列出文件和目录" class="headerlink" title="列出文件和目录"></a>列出文件和目录</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll</span><br></pre></td></tr></table></figure><h6 id="新建文件（a）"><a href="#新建文件（a）" class="headerlink" title="新建文件（a）"></a>新建文件（a）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch a</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="查看文件（a）"><a href="#查看文件（a）" class="headerlink" title="查看文件（a）"></a>查看文件（a）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat a</span><br></pre></td></tr></table></figure><h6 id="编辑文件（a）"><a href="#编辑文件（a）" class="headerlink" title="编辑文件（a）"></a>编辑文件（a）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim a</span><br></pre></td></tr></table></figure><p>按enter键，然后按I键，当左下角出现 INSERT 时，移动光标到编辑位置进行编辑。<br>编辑完成后，按esc键，退出编辑环境：<br>放弃修改内容并退出：按键输入 :q 然后按enter键；<br>保存修改内容并退出：按键输入 :wq 然后按enter键。</p><h6 id="文件夹重命名（将文件夹a重命名为b）"><a href="#文件夹重命名（将文件夹a重命名为b）" class="headerlink" title="文件夹重命名（将文件夹a重命名为b）"></a>文件夹重命名（将文件夹a重命名为b）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv a b</span><br></pre></td></tr></table></figure><h6 id="移动文件夹（将文件夹a移动到文件夹b，并重名名为c）"><a href="#移动文件夹（将文件夹a移动到文件夹b，并重名名为c）" class="headerlink" title="移动文件夹（将文件夹a移动到文件夹b，并重名名为c）"></a>移动文件夹（将文件夹a移动到文件夹b，并重名名为c）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /a /b/c</span><br></pre></td></tr></table></figure><h6 id="根据端口查进程pid"><a href="#根据端口查进程pid" class="headerlink" title="根据端口查进程pid"></a>根据端口查进程pid</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i:端口号</span><br></pre></td></tr></table></figure><h6 id="杀进程"><a href="#杀进程" class="headerlink" title="杀进程"></a>杀进程</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kill PID号</span><br></pre></td></tr></table></figure><h6 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h6><p>1.立即关机<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown 0</span><br></pre></td></tr></table></figure></p><p>2.定时关机（10分钟后）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown +10</span><br></pre></td></tr></table></figure></p><h6 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h6><p>1.立即重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure></p><p>2.定时重启（10分钟后）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -r +3</span><br></pre></td></tr></table></figure></p><p>3.定时重启（在20:29重启）[任务放到后台，用户可以继续操作终端]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -r 20:29 [&amp;]</span><br></pre></td></tr></table></figure></p><h5 id="APT高级软件包管理工具"><a href="#APT高级软件包管理工具" class="headerlink" title="APT高级软件包管理工具"></a>APT高级软件包管理工具</h5><h6 id="更新所有软件包"><a href="#更新所有软件包" class="headerlink" title="更新所有软件包"></a>更新所有软件包</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h6 id="apt-get-常用命令"><a href="#apt-get-常用命令" class="headerlink" title="apt-get 常用命令"></a>apt-get 常用命令</h6><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>apt-get install node</td><td>下载并安装node</td></tr><tr><td>apt-get upgrade</td><td>下载并安装本系统上已有的软件包的罪行版本</td></tr><tr><td>apt-get remove node</td><td>卸载特定的软件包（node）</td></tr><tr><td>apt-get source</td><td>下载特定软件包的源代码</td></tr><tr><td>apt-get clean</td><td>删除所有的已下载的包文件</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s5.postimg.cc/eueihnoyv/ccef0b51172a4471917312b009af1fd4.jpg&quot; alt=&quot;ccef0b51172a4471917312b009af1fd4.jpg&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;打开系统根目录&quot;&gt;&lt;a href=&quot;#打开系统根目录&quot; class=&quot;headerlink&quot; title=&quot;打开系统根目录&quot;&gt;&lt;/a&gt;打开系统根目录&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;进入home目录&quot;&gt;&lt;a href=&quot;#进入home目录&quot; class=&quot;headerlink&quot; title=&quot;进入home目录&quot;&gt;&lt;/a&gt;进入home目录&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /home&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;列出文件和目录&quot;&gt;&lt;a href=&quot;#列出文件和目录&quot; class=&quot;headerlink&quot; title=&quot;列出文件和目录&quot;&gt;&lt;/a&gt;列出文件和目录&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ll&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;新建文件（a）&quot;&gt;&lt;a href=&quot;#新建文件（a）&quot; class=&quot;headerlink&quot; title=&quot;新建文件（a）&quot;&gt;&lt;/a&gt;新建文件（a）&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo touch a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://lenglu.codeing.me/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
