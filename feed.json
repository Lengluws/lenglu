{"title":"Lenglu的博客","description":null,"language":"zh-CN","link":"http://lenglu.codeing.me","pubDate":"Sun, 16 Sep 2018 11:06:00 GMT","lastBuildDate":"Sun, 16 Sep 2018 12:16:11 GMT","generator":"hexo-generator-json-feed","webMaster":"Lenglu","items":[{"title":"服务器端URL从定向后获取referer(referrer)","link":"http://lenglu.codeing.me/2018/09/16/服务器端URL从定向后获取referer-referer/","description":"使用express框架时服务器端重定向后获取不到referer(referrer)如果使用过这个参数，我们会发现有时候是referer，而有时候是referrer。究竟是怎么回事呢？这里的referer是一个历史遗留问题,http中里面有用来表示页面或者资源请求头，是在上世纪九十年代提出来的，但是当时将这个命名为referer，并写入http协议的里面，正确的写法实际上是referrer。由于在http协议中标准错误了，错误大家就讲错就错，浏览器和服务端使用这个错误的referer，但是意思都是一个样的。但是在JavaScript中呢，大家就比较统一，统一使用referrer，我们可以使用document.referrer来获取referrer来找到源地址。在测试重定向时，先用NodeJs在后端进行referer获取：1234router.get(&apos;/test&apos;, function(req, res, next) &#123; var Url = req.originalUrl; var refe = req.headers[referer];&#125;) req.originalUrl获取的是当前的url地址,没有问题。但是req.headers[referer]却没有结果，console.log出现的是undefined，将referer改为了referrer也是同样的结果。点开express查看源码(/express/lib/request.js):123456789101112131415161718req.get = req.header = function header(name) &#123; if (!name) &#123; throw new TypeError(&apos;name argument is required to req.get&apos;); &#125; if (typeof name !== &apos;string&apos;) &#123; throw new TypeError(&apos;name must be a string to req.get&apos;); &#125; var lc = name.toLowerCase(); switch (lc) &#123; case &apos;referer&apos;: case: &apos;referrer&apos;: return this.headers.referrer || this.headers.referer; default: return this.headers[lc]; &#125;&#125; 显示其中有这个方法，而且能同时识别referer和referrer，但我们确是得到了undefined，那么我们就输出headers：12345678router.get(&apos;/test&apos;, function(req, res, next)&#123; var Url = req.originalUrl; var refe = req.headers; res.writeHeade(200, &#123; &quot;Content-Type&quot;: &quot;text/html;charset=utf-8&quot; &#125;); res.end(JSON.stringify(refe));&#125; 出现的结果是：1&#123;&quot;host&quot;:&quot;localhost:3000&quot;,&quot;connection&quot;:&quot;keep-alive&quot;,&quot;upgrade-insecure-requests&quot;:&quot;1&quot;,&quot;user-agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36&quot;,&quot;accept&quot;:&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;,&quot;accept-encoding&quot;:&quot;gzip, deflate, sdch&quot;,&quot;accept-language&quot;:&quot;zh-CN,zh;q=0.8&quot;&#125; 原因是重定向时没有这个参数。再查查看，会发现。这个referer的支持是不统一的，referer这个参数是浏览器自动添加到header中的，并且通过浏览器自动传递下去，不管是几重定向，找到都是最终的源地址。重新部署一个服务器，写两个网页，用a来进行重定向,我们得到的结果是：1&#123;&quot;host&quot;:&quot;localhost:3000&quot;,&quot;connection&quot;:&quot;keep-alive&quot;,&quot;upgrade-insecure-requests&quot;:&quot;1&quot;,&quot;user-agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36&quot;,&quot;accept&quot;:&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;,&quot;referer&quot;:&quot;http://localhost/test/1.html&quot;,&quot;accept-encoding&quot;:&quot;gzip, deflate, sdch&quot;,&quot;accept-language&quot;:&quot;zh-CN,zh;q=0.8&quot;&#125; 现在便有了referer属性。 能获取到referer 不能获取到referer 使用A标签来访问页面 使用js重定向 location.href 和 location.replace() submit input提交的表单post和get 服务器端的redirect，PHP中的header(“location:”) 使用js提交的post和get表单 使用http重定向（我开始做的就是http重定向的项目，所以得不到referer参数）","pubDate":"Sun, 16 Sep 2018 11:06:00 GMT","guid":"http://lenglu.codeing.me/2018/09/16/服务器端URL从定向后获取referer-referer/","category":"Express,重定向"},{"title":"Ubuntu终端常用命令","link":"http://lenglu.codeing.me/2018/09/16/Ubuntu终端常用命令/","description":"打开系统根目录1cd / 进入home目录1cd /home 列出文件和目录1ls 1ll 新建文件（a）1sudo touch a 查看文件（a）1cat a 编辑文件（a）1sudo vim a 按enter键，然后按I键，当左下角出现 INSERT 时，移动光标到编辑位置进行编辑。编辑完成后，按esc键，退出编辑环境：放弃修改内容并退出：按键输入 :q 然后按enter键；保存修改内容并退出：按键输入 :wq 然后按enter键。 文件夹重命名（将文件夹a重命名为b）1sudo mv a b 移动文件夹（将文件夹a移动到文件夹b，并重名名为c）1sudo mv /a /b/c 根据端口查进程pid1sudo lsof -i:端口号 杀进程1sudo kill PID号 关机1.立即关机1sudo shutdown 0 2.定时关机（10分钟后）1sudo shutdown +10 重启1.立即重启1sudo shutdown -r now 2.定时重启（10分钟后）1sudo shutdown -r +3 3.定时重启（在20:29重启）[任务放到后台，用户可以继续操作终端]1sudo shutdown -r 20:29 [&amp;] APT高级软件包管理工具更新所有软件包1sudo apt-get update apt-get 常用命令 命令 描述 apt-get install node 下载并安装node apt-get upgrade 下载并安装本系统上已有的软件包的罪行版本 apt-get remove node 卸载特定的软件包（node） apt-get source 下载特定软件包的源代码 apt-get clean 删除所有的已下载的包文件","pubDate":"Sun, 16 Sep 2018 10:28:00 GMT","guid":"http://lenglu.codeing.me/2018/09/16/Ubuntu终端常用命令/","category":"Ubuntu"},{"title":"Hello World","link":"http://lenglu.codeing.me/2018/09/16/hello-world/","description":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","pubDate":"Sun, 16 Sep 2018 07:43:29 GMT","guid":"http://lenglu.codeing.me/2018/09/16/hello-world/","category":""}]}